package com.example.demo.controller;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.model.Employee;
import com.example.demo.service.EmployeeService;

import jakarta.validation.Valid;

@RestController
@RequestMapping("/employees")
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    public EmployeeController(EmployeeService employeeService) {
        this.employeeService = employeeService;
    }
    
    // ✅ Add a new employee
    @PostMapping
    public Employee addEmployee(@Valid @RequestBody Employee employee) {
        return employeeService.saveEmployee(employee);
    }

    // ✅ Get all employees
    @GetMapping("/all")
    public List<Employee> getAllEmployees() {
        return employeeService.getAllEmployees();
    }

    // ✅ Get employee by ID
    @GetMapping("/{id}")
    public Optional<Employee> getEmployeeById(@PathVariable Long id) {
        return employeeService.getEmployeeById(id);
    }

    // ✅ Update employee
    @PutMapping("/{id}")
    public Employee updateEmployee(@PathVariable Long id, @Valid @RequestBody Employee employee) {
        employee.setId(id);
        return employeeService.saveEmployee(employee);
    }

    // ✅ Delete employee
    @DeleteMapping("/{id}")
    public String deleteEmployee(@PathVariable Long id) {
        employeeService.deleteEmployee(id);
        return "Employee with ID " + id + " deleted successfully.";
    }
    
    // ✅ Pagination & Sorting
    @GetMapping
    public Page<Employee> getEmployees(
            @RequestParam(defaultValue = "0") int page,
            @RequestParam(defaultValue = "10") int size,
            @RequestParam(defaultValue = "id") String sortBy) {
        return employeeService.getEmployeesPaginated(page, size, sortBy);
    }

    // ✅ Custom query: Employees by department
    @GetMapping("/department/{dept}")
    public List<Employee> getEmployeesByDepartment(@PathVariable String dept) {
        return employeeService.getEmployeesByDepartment(dept);
    }
    
    @GetMapping("/getEmployeesBySalariesGreaterThan/{salary}")
    public List<Employee> getEmployeeByySalaryRange(@PathVariable double salary) {
    	return employeeService.getEmployeesBySalaryRange(salary);
    }
    
    @GetMapping("getEmployeesBySalaryRange")
    public List<Employee> getEmployeesBySalaryRange(@RequestParam double min,@RequestParam double max) {
    	return employeeService.getEmployeesBySalaryRange(min, max);
    }
    
    @GetMapping("getEmployeeBySalaryAndName")
    public List<Employee> getEmployeeBySalaryAndName(@RequestParam  double salary,@RequestParam String name) {
    	return employeeService.getEmployeeByNameAndSalary(salary, name);
    }
    
    @GetMapping("getEmployeesPaginatedd")
    public Page<Employee> getEmployeesPaginatedd(@RequestParam int page, @RequestParam int size,@RequestParam String sortBy) {
    	return employeeService.getEmployeesPaginatedd(page, size, sortBy);
    }
}
