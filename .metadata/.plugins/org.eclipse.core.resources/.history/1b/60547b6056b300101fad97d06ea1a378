package com.example.demo.service;

import com.example.demo.model.Employee;
import com.example.demo.repository.EmployeeRepository;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    // ✅ Create or Update Employee
    public Employee saveEmployee(Employee employee) {
        return employeeRepository.save(employee);
    }

    // ✅ Get all Employees
    public List<Employee> getAllEmployees() {
        return employeeRepository.findAll();
    }

    // ✅ Get Employee by ID
    public Optional<Employee> getEmployeeById(Long id) {
        return employeeRepository.findById(id);
    }

    // ✅ Delete Employee
    public void deleteEmployee(Long id) {
        employeeRepository.deleteById(id);
    }
    
 // ✅ Pagination & Sorting
    public Page<Employee> getEmployeesPaginated(int page, int size, String sortBy) {
        return employeeRepository.findAll(
                PageRequest.of(page, size, Sort.by(sortBy))
        );
    }

    // ✅ Custom query by department
    public List<Employee> getEmployeesByDepartment(String dept) {
        return employeeRepository.findByDepartment(dept);
    }
    
    public List<Employee> getEmployeesBySalaryRange(double salary) {
    	return employeeRepository.findBySalaryGreaterThan(salary);
    }
    
    public List<Employee> getEmployeesBySalaryRange(double min, double max) {
    	return employeeRepository.findBySalaryBetween(min, max);
    }
    
    public List<Employee> getEmployeeByNameAndSalary(double salary,String name) {
    	return employeeRepository.findBySalaryAndName(salary, name);
    }
    
    public Page<Employee> getEmployeesPaginatedd(int page, int size, String sortBy) {
    	return employeeRepository.findAll(PageRequest.of(page, size,Sort.by(sortBy)));
    }
}
